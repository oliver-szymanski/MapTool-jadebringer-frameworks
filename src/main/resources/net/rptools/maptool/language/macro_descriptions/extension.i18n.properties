ping.description = Quick way to check if the jadebringer-base-framework is available.
ping.summary     = <i>usage:</i> ping()<br>returns: a string describing the framework version

settings_list.description = List all settings on a token
settings_list.summary = List all settings on a token<br>\
<br>\
<i>usage:</i> <b>settings_list([prefix [, token] ])</b><br>\
<br>\
<i>param:</i> prefix (optional): prefix used to filter the setting names on. E.g. allows you to only list settings starting with "debug.settings."<br>\
<i>param:</i> token (optional, if used prefix must be set first e.g. to ""): identifies the token to store the setting on as a property. Default to "Lib:JadebringerSettings" which must exist if used<br>\
<br>\
<i>result:</i> Text string of "key = value<br>..." for all setting keys<br>\
<br>\
<i>note:</i> the property containing the setting will actually be reset. So any campaign default values might show up again if the setting/property is accessed afterwards.<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others
settings_delete.description = Delete a setting on a token
settings_delete.summary = Delete a setting on a token<br>\
<br>\
<i>usage:</i> <b>settings_delete(key[, token])</b><br>\
<br>\
<i>param:</i> key - a text string to identify the setting name<br>\
<i>param:</i> token (optional): identifies the token to store the setting on as a property. Default to "Lib:JadebringerSettings" which must exist if used<br>\
<br>\
<i>result:</i> Text string of "key deleted"<br>\
<br>\
<i>note:</i> the property containing the setting will actually be reset. So any campaign default values might show up again if the setting/property is accessed afterwards.<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others
settings_get.description = Get a value for a key on a token
settings_get.summary = Get a value for a key on a token<br>\
<br>\
<i>usage:</i> <b>settings_get(key, defaultValue[, token])</b><br>\
<br>\
<i>param:</i> key - a text string to identify the setting name<br>\
<i>param:</i> value - the default value of the setting, used if no value is found<br>\
<i>param:</i> token (optional): identifies the token to store the setting on as a property. Default to "Lib:JadebringerSettings" which must exist if used<br>\
<br>\
<i>result:</i> The found value or the given defaultValue if not found<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others
settings_set.description = Set a value for a key on a token
settings_set.summary = Set a value for a key on a token<br>\
<br>\
<i>usage:</i> <b>settings_set(key, value[, token])</b><br>\
<br>\
<i>param:</i> key - a text string to identify the setting name<br>\
<i>param:</i> value - the value of the setting<br>\
<i>param:</i> token (optional): identifies the token to store the setting on as a property. Default to "Lib:JadebringerSettings" which must exist if used<br>\
<br>\
<i>result:</i> Text string of "key = value"<br>\
<br>\
<i>note:</i> It is recommend to prefix settings names to group them, e.g. "debug.settings.enabled"<br>\
<br>\
<i>note:</i> Setting will actually be stored in a property of the token with the name of key.<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others

outputTo.description = Send a chat message
outputTo.summary = Send a chat message<br>\
<br>\
<i>usage:</i> <b>outputTo(who, message [, defer [, target]])</b><br>\
<br>\
<i>param:</i> who - to whom the message should be send. Either a player name or a special channel as of "self", "gm", "all", "none", "gm-self"<br>\
<i>param:</i> message - the plain message to be send<br>\
<i>param:</i> defer (optional): send straight away or after macro execution<br>\
<i>param:</i> target (optional, needs defer to be set as well when used): defaults to "impersonated". The target that this send message runs on.<br>\
<br>\
<i>result:</i> -<br>\

maps_getExtent.description = Returns the extent of the current map (the used area)
maps_getExtent.summary = Returns the extent of the current map (the used area)<br>\
<br>\
<i>usage:</i> <b>maps_getExtent( [pixels [, delimiter]])</b><br>\
<br>\
<i>param:</i> pixels (optional) - true to return pixels, false to return cell point coordinates. default to true<br>\
<i>param:</i> delimiter (optional, needs pixels to be set as well when used) - either "json" to return a json object or ";" to return a string props representation. Defaults to ";"<br>\
<br>\
<i>result:</i> the current map extent. E.g. "startX=0;startY=0;endX=100;endY=100<br>
maps_extent.description = Zoom and pan to the current map extent
maps_extent.summary = Zoom and pan to the current map extent<br>\
<br>\
<i>usage:</i> <b>maps_extent()</b><br>\
<br>\
<i>result:</i> - 
maps_center.description = Pan to the current map extent center
maps_center.summary = Pan to the current map extent center<br>\
<br>\
<i>usage:</i> <b>maps_center()</b><br>\
<br>\
<i>result:</i> -

macros_sendExecuteMacro.description = Send a message with an executable link to be executed by another player
macros_sendExecuteMacro.summary = Send a message with an executable link to be executed by another player<br>\
<br>\
<i>usage:</i> <b>macros_sendExecuteMacro(sendToWho, message, clickableLinkTitle, macroName, who [, args [, target] ])</b><br>\
<br>\
<i>param:</i> sendToWho - who the message with the executable link should be send to. Either a player name or a special channel as of "self", "gm", "all", "none", "gm-self"<br>\
<i>param:</i> message - The message to be send. Can include %link% (if not this will added to the end of message). \
The %link% will be replaced with the executable link. \
If in case of auto execution the link should not be shown the message can e.g. be "Command received and to executed <!-- %link% -->".\
The "<!-- -->" part will hide it in chat.<br>\
<i>param:</i> clickableLinkTitle - the text that the executable link will have.<br>\
<i>param:</i> macroName - the fully qualified macroName (so including the token it's stored on, e.g. example@lib:MyToken)<br>\
<i>param:</i> who - to who the output of this macro is addressed<br>\
<i>param:</i> args (optional) - any arguments for the macro call<br>\
<i>param:</i> target (optional, needs args to be set when used, e.g. to "") - the target this macro runs on, default to "impersonated"<br>\
<br>\
<i>result:</i> -<br>\
<br>\
<i>note:</i> the macro must exists at the players side that is referenced by sendToWho<br>\
<br>\
<i>note:</i> Link will be auto executed if it fits the general requirements for MapTool auto execution<br>\
<br>\
<i>note:</i> encapsulates create link, create anchor, outputTo
macros_executeMacro.description = Executes a macro (omnits sending the output)
macros_executeMacro.summary = Executes a macro (omits sending the output)<br>\
<br>\
<i>usage:</i> <b>macros_executeMacro(macroName, who [, args [, target] ])</b><br>\
<br>\
<i>param:</i> macroName - the fully qualified macroName (so including the token it's stored on, e.g. example@lib:MyToken)<br>\
<i>param:</i> who - to who the output of this macro is addressed. Either a player name or a special channel as of "self", "gm", "all", "none", "gm-self"<br>\
<i>param:</i> args (optional) - any arguments for the macro call<br>\
<i>param:</i> target (optional, needs args to be set when used, e.g. to "") - the target this macro runs on, default to "impersonated"<br>\
<br>\
<i>result:</i> the macro execution result<br>\
<br>\
<i>note:</i> encapsulates create/exec link. If you actually want to send the output use macros_sendExecuteMacro(...) instead.
macros_executeMacroSendOutput.description = Executes a macro (with sending the output)
macros_executeMacroSendOutput.summary = Executes a macro (with sending the output)<br>\
<br>\
<i>usage:</i> <b>macros_executeMacroSendOutput(macroName, who [, args [, target] ])</b><br>\
<br>\
<i>param:</i> macroName - the fully qualified macroName (so including the token it's stored on, e.g. example@lib:MyToken)<br>\
<i>param:</i> who - to who the output of this macro is addressed. Either a player name or a special channel as of "self", "gm", "all", "none", "gm-self"<br>\
<i>param:</i> args (optional) - any arguments for the macro call<br>\
<i>param:</i> target (optional, needs args to be set when used, e.g. to "") - the target this macro runs on, default to "impersonated"<br>\
<br>\
<i>result: </i> -<br>\
<br>\
<i>note:</i> encapsulates create/exec link and outputTo
macros_executeMT.description = Execute strings as MT macros
macros_executeMT.summary = Execute strings as MT macros<br>\
<br>\
<i>usage:</i> <b>macros_executeMT(command...)</b><br>\
<br>\
<i>param:</i> command (multiple commands a parameters are possible) - each command is execute as MT macro code<br>\
<br>\
<i>result: concatenation of each command execution result</i> -

links_createLink.description = Create a macro link
links_createLink.summary = Create a macro link<br>\
<br>\
<i>usage:</i> <b>links_createLink(macroName, who [, args [, target] ])</b><br>\
<br>\
<i>param:</i> macroName - the fully qualified macroName (so including the token it's stored on, e.g. example@lib:MyToken)<br>\
<i>param:</i> who - to who the output of this macro is addressed. Either a player name or a special channel as of "self", "gm", "all", "none", "gm-self"<br>\
<i>param:</i> args (optional) - any arguments for the macro call<br>\
<i>param:</i> target (optional, needs args to be set when used, e.g. to "") - the target this macro runs on, default to "impersonated"<br>\
<br>\
<i>result:</i> the link<br>\
<br>\
<i>note:</i> encapsulates macroLinkText
links_execLink.description = Executes macro link
links_execLink.summary = Executes macro link<br>\
<br>\
<i>usage:</i> <b>links_execLink(link [, omitSendingOutput])</b><br>\
<br>\
<i>param:</i> link - the macro link<br>\
<i>param:</i> omitSendingOutput (optional) - 1 to omit sending link execution output. Defaults to 0<br>\
<br>\
<i>result:</i> the link<br>\
<br>\
<i>note:</i> encapsulates macroLinkText
links_createAnchor.description = Create a html anchor for a link
links_createAnchor.summary = Create a html anchor for a link<br>\
<br>\
<i>usage:</i> <b>links_createAnchor(message, link, image, tooltipText, cssClass)</b><br>\
<br>\
<i>param:</i> message (can be "") - used as link text<br>\
<i>param:</i> link - the macro link, best created with links_createLink(...) function<br>\
<i>param:</i> image (can be "") - if not "" used as an image for the link. Can be a "asset://" link<br>\
<i>param:</i> tooltipText (can be "") - used as tooltip for the anchor<br>\
<i>param:</i> cssClass (can be "") - used as cssClass for the anchor<br>\
<br>\
<i>result:</i> the anchor (html &lt;a&gt; tag)<br>\
<br>\
<i>note:</i> encapsulates macroLinkText

inputYesNoCancel.description = Same as input function, just with Yes/No/Cancel buttons
inputYesNoCancel.summary = Same as input function, just with Yes/No/Cancel buttons<br>\
<br>\
<i>usage:</i> <b>inputYesNoCancel(...)</b>, see input function<br>\
<br>\
<i>result:</i> see input function, but with additional return of 2 when "No" was clicked.
inputOKCancel.description = Same as input function
inputOKCancel.summary = Same as input function<br>\
<br>\
<i>usage:</i> <b>inputOKCancel(...)</b>, see input function<br>\
<br>\
<i>result:</i> see input function

error.description = Show a local error message in chat
error.summary = Show a local error message in chat<br>\
<br>\
<i>usage:</i> <b>error(format [, args...])</b><br>\
<i>example:</i> <b>error("an error occured %s", "no initiative")</b><br>\
<br>\
<i>param:</i> format - The format string (or simple message if args are not used)<br>\
<i>param:</i> args (optional multiple args) - arguments to be filled in the format string<br>\
<br>\
<i>result:</i> -\
<br>\
<i>Note:</i> - This will use the format string as in the printf or Java String.format spec to produce output.
warn.description = Show a local warning message in chat
warn.summary = Show a local warning message in chat<br>\
<br>\
<i>usage:</i> <b>warn(format [, args...])</b><br>\
<i>example:</i> <b>warn("just a warning: %s", "no initiative")</b><br>\
<br>\
<i>param:</i> format - The format string (or simple message if args are not used)<br>\
<i>param:</i> args (optional multiple args) - arguments to be filled in the format string<br>\
<br>\
<i>result:</i> -\
<br>\
<i>Note:</i> - This will use the format string as in the printf or Java String.format spec to produce output.
cc.description = Used to put code comments in macros 
cc.summary = Used to put code comments in macros<br>\
<br>\
<i>usage:</i> <b>cc([args...])</b><br>\
<i>example:</i> <b>cc("calculating hitpoints for player")</b><br>\
<br>\
<i>param:</i> args (optional multiple args) - all arguments are ignored<br>\
<br>\
<i>result:</i> -\
<br>\
<i>Note:</i> - This will just ignore anything that is put in as a parameter\
Use this e.g. as [h: cc("this is a code comment")] to make comment in your code that will not be part of any output.\
This is a better way to create MT code comment than putting them in &lt;!-- my comment --&gt; \
cause that will actually be hidden from chat but still be in the output. 
trace.description = Show a local trace message in chat if trace is enabled
trace.summary = Show a local trace message in chat if trace is enabled<br>\
<br>\
<i>usage:</i> <b>trace(format [, args...])</b><br>\
<i>example:</i> <b>trace("calculating hitpoints for player %s", getPlayer())</b><br>\
<br>\
<i>param:</i> format - The format string (or simple message if args are not used)<br>\
<i>param:</i> args (optional multiple args) - arguments to be filled in the format string<br>\
<br>\
<i>result:</i> -\
<br>\
<i>Note:</i> - This will use the format string as in the printf or Java String.format spec to produce output.
debug.description = Show a local debug message in chat if debug is enabled
debug.summary = Show a local debug message in chat if debug is enabled<br>\
<br>\
<i>usage:</i> <b>debug(format [, args...])</b><br>\
<i>example:</i> <b>debug("current initiative owned by %s", getInitiativeName()</b><br>\
<br>\
<i>param:</i> format - The format string (or simple message if args are not used)<br>\
<i>param:</i> args (optional multiple args) - arguments to be filled in the format string<br>\
<br>\
<i>result:</i> -<br>\
<br>\
<i>Note:</i> - This will use the format string as in the printf or Java String.format spec to produce output.
debug_setTrace.description = Enable or disable trace
debug_setTrace.summary = Enable or disable trace<br>\
<br>\
<i>usage:</i> <b>debug_setTrace(enabled)</b><br>\
<br>\
<i>param:</i> enabled - 1 activates trace, 0 deactivates trace<br>\
<br>\
<i>result:</i> -
debug_toggleDebug.description = Toggle debug enabled setting
debug_toggleDebug.summary = Toggle debug enabled setting<br>\
<br>\
<i>usage:</i> <b>debug_toggleDebug()</b><br>\
<br>\
<i>result:</i> 1 if enabled afterwards, 0 if not
debug_setDebug.description = Enable or disable debug
debug_setDebug.summary = Enable or disable debug<br>\
<br>\
<i>usage:</i> <b>debug_setDebug(enabled)</b><br>\
<br>\
<i>param:</i> enabled - 1 activates debug, 0 deactivates debug<br>\
<br>\
<i>result:</i> -
debug_isTrace.description = Check if trace is enabled
debug_isTrace.summary = Check if trace is enabled<br>\
<br>\
<i>usage:</i> <b>debug_isTrace()</b><br>\
<br>\
<i>result:</i> 1 if enabled, 0 if not
debug_isDebug.description = Check if debug is enabled
debug_isDebug.summary = Check if debug is enabled<br>\
<br>\
<i>usage:</i> <b>debug_isDebug()</b><br>\
<br>\
<i>result:</i> 1 if enabled, 0 if not
debug_toggleTrace.description = Toggle trace enabled setting
debug_toggleTrace.summary = Toggle trace enabled setting<br>\
<br>\
<i>usage:</i> <b>debug_toggleTrace()</b><br>\
<br>\
<i>result:</i> 1 if enabled afterwards, 0 if not
debug_toggleDebug.description = Toggle debug enabled setting
debug_toggleDebug.summary = Toggle debug enabled setting<br>\
<br>\
<i>usage:</i> <b>debug_toggleDebug()</b><br>\
<br>\
<i>result:</i> 1 if enabled afterwards, 0 if not
debug_inspect.description = Open an inspector window to check variable values
debug_inspect.summary = Open an inspector window to check variable values<br>\
<br>\
<i>usage:</i> <b>debug_inspect(variableNames...)</b><br>\
<br>\
<i>param:</i> variableNames (multiple possible) - variable names of the variables to inspect as strings<br>\
<br>\
<i>result:</i> -<br>\
<br>\
<i>Note:</i> This will hold macro execution to show the current variable values until the dialogue is closed
debug_manipulate.description = Open an inspector window to check and manipulate variable values
debug_manipulate.summary = Open an inspector window to check and manipulate variable values<br>\
<br>\
<i>usage:</i> <b>debug_manipulate(variableNames...)</b><br>\
<br>\
<i>param:</i> variableNames (multiple possible) - variable names of the variables to inspect/manipulate as strings<br>\
<br>\
<i>result:</i> -<br>\
<br>\
<i>Note:</i>  This will hold macro execution to show the current variable values until the dialogue is closed.\
Variable content can be changed in the dialogue.

  
content_save.description = Saves content on/in a token/macro/table
content_save.summary = Saves content on/in a token/macro/table<br>\
<br>\
<i>usage:</i> <b>content_save(name, sourceType, source, content)</b><br>\
<br>\
<i>param:</i> name - a text string to identify key under that the content is saved (e.g. table index, token property name or macro name, depending on sourceType)<br>\
<i>param:</i> sourceType - defines on what type of object to save the content. Either "tokenProperty", "tokenMacro" or "table"<br>\
<i>param:</i> source - in case of sourceType "tokenProperty"/"tokenMacro" this is the token name, in case of "table" this is the table name<br>\
<i>param:</i> content - the content to be saved.<br>\
<br>\
<i>result:</i> -<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others
content_load.description = Load content on/in a token/macro/table
content_load.summary = Load content on/in a token/macro/table<br>\
<br>\
<i>usage:</i> <b>content_load(name, sourceType, source)</b><br>\
<br>\
<i>param:</i> name - a text string to identify key under that the content is saved (e.g. table index, token property name or macro name, depending on sourceType)<br>\
<i>param:</i> sourceType - defines on what type of object to save the content. Either "tokenProperty", "tokenMacro" or "table"<br>\
<i>param:</i> source - in case of sourceType "tokenProperty"/"tokenMacro" this is the token name, in case of "table" this is the table name<br>\
<br>\
<i>result:</i> content or "" if nothing was found<br>\
<br>\
<i>note:</i> token will be looked up by id or name (the latter first looked up on current map, then on all others

 
frames_isEnabledButton.description = Check if the button is enabled
frames_isEnabledButton.summary = Check if the button is enabled<br>\
<br>\
<i>usage:</i> <b>frames_isEnabledButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if enabled, 0 if not
frames_isHiddenButton.description = Check if the button is hidden
frames_isHiddenButton.summary = Check if the button is hidden<br>\
<br>\
<i>usage:</i> <b>frames_isHiddenButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if hidden, 0 if not
frames_disableButton.description = Disable button
frames_disableButton.summary = Disable button<br>\
<br>\
<i>usage:</i> <b>frames_disableButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the button could be disabled, 0 if not
frames_enableButton.description = Enable button
frames_enableButton.summary = Enable button<br>\
<br>\
<i>usage:</i> <b>frames_enableButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the button could be enabled, 0 if not
frames_hideButton.description = Hide button
frames_hideButton.summary = Hide button<br>\
<br>\
<i>usage:</i> <b>frames_hideButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the button could be hidden, 0 if not
frames_showButton.description = Show button
frames_showButton.summary = Show button<br>\
<br>\
<i>usage:</i> <b>frames_showButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the button could be shown, 0 if not
frames_removeButton.description = Remove button
frames_removeButton.summary = Remove button<br>\
<br>\
<i>usage:</i> <b>frames_removeButton(name, group, frame, prefix)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the button could be removed, 0 if not
frames_showFrame.description = Show frame
frames_showFrame.summary = Show frame<br>\
<br>\
<i>usage:</i> <b>frames_showFrame(frame, prefix)</b><br>\
<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the frame could be shown, 0 if not
frames_addButton.description = Add a button
frames_addButton.summary = Add a button<br>\
<br>\
<i>usage:</i> <b>frames_addButton(macroName, name, text, tooltip, group, frame, prefix, image, frameAndImage, trustedRequired)</b><br>\
<br>\
<i>param:</i> macroName - the fully qualified macro name (that includes the "@tokenName") to call when button is clicked.<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> text - the button text<br>\
<i>param:</i> tooltip - the button tooltip<br>\
<i>param:</i> group - the button group (will create a new group in the frame if it does not yet exist)<br>\
<i>param:</i> frame - the frame (will create a new frame if none exists with the prefix)<br>\
<i>param:</i> prefix - the frame prefix<br>\
<i>param:</i> image - the button image. Can be a "asset://" asset id<br>\
<i>param:</i> frameAndImage - 0 means the text is only shown if the image is not found, 1 means text is always shown<br>\
<i>param:</i> trustedRequired - 0 if this button is for everyone, 1 if executing the button on click needs a trusted context<br>\
<br>\
<i>result:</i> 1 if the button text could be set, 0 if not<br>\
<br>\
<i>note:</i> This creates and adds a new button and puts it in a frame in the correct button group. When clicked it will call the defined macro. \
The macro.args consists of a text string as of "prefix.frame.group.name" so that the macro can detect which button was clicked.
frames_setButtonText.description = Set the text of a button
frames_setButtonText.summary = Set the text of a button<br>\
<br>\
<i>usage:</i> <b>frames_setButtonText(name, group, frame, prefix, text)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<i>param:</i> text - the button text<br>\
<br>\
<i>result:</i> 1 if the button text could be set, 0 if not
frames_setButtonImage.description = Set the image of a button
frames_setButtonImage.summary = Set the image of a button<br>\
<br>\
<i>usage:</i> <b>frames_setButtonImage(name, group, frame, prefix, image)</b><br>\
<br>\
<i>param:</i> name - the button name<br>\
<i>param:</i> group - the button group<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<i>param:</i> image - the button image. Can be a "asset://" asset id<br>\
<br>\
<i>result:</i> 1 if the button image could be set, 0 if not
frames_isFrameVisible.description = Check if frame is visible
frames_isFrameVisible.summary = Check if frame is visible<br>\
<br>\
<i>usage:</i> <b>frames_isFrameVisible(frame, prefix)</b><br>\
<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the frame is visible, 0 if not
frames_hideFrame.description = Hide frame
frames_hideFrame.summary = Hide frame<br>\
<br>\
<i>usage:</i> <b>frames_hideFrame(frame, prefix)</b><br>\
<br>\
<i>param:</i> frame - the frame<br>\
<i>param:</i> prefix - the frame prefix<br>\
<br>\
<i>result:</i> 1 if the frame could be hidden, 0 if not
frames_hideAllFrames.description = Hide all frames
frames_hideAllFrames.summary = Hide all frames<br>\
<br>\
<i>usage:</i> <b>frames_hideAllFrames()</b><br>\
<br>\
<i>result:</i> -
frames_showAllFrames.description = Show all frames
frames_showAllFrames.summary = Show all frames<br>\
<br>\
<i>usage:</i> <b>frames_showAllFrames()</b><br>\
<br>\
<i>result:</i> -
